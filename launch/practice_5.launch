<?xml version="1.0"?>
<launch>
    
    <arg name="bag_file"                default="2023-05-18-14-26-36_sensors_tfl_bot_aed_with_set_dest.bag" />
    <arg name="speed_limit"             default="40" />
    <arg name="lanelet2_map_name"       default="tartu_demo.osm" />
    <arg name="use_localization"        default="true" />
    <arg name="use_planning"            default="true" />
    <arg name="use_detection"           default="false" />
    <arg name="use_control"             default="true" />


    <!-- Use simulation time from bag -->
    <param name="/use_sim_time" value="true" />

    <!-- Play back bag -->
    <node pkg="rosbag" type="play" name="player" required="true" args="$(find autoware_mini)/data/bags/$(arg bag_file) --clock --queue=1" />

    <!-- Localization -->
    <group ns="localization">
        <node pkg="autoware_mini_practice_solutions" type="localizer.py" name="localizer" output="screen" required="true" />
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/localization.yaml" />
    </group>

    <!-- Planning -->
    <group ns="planning">
        <!-- Lanelet2 map visualizer -->
        <node pkg="autoware_mini" type="lanelet2_map_visualizer.py" name="lanelet2_map_visualizer" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>

        <!-- Lanelet2 global planner -->
        <node pkg="autoware_mini_practice_solutions" type="lanelet2_global_planner.py" name="lanelet2_global_planner" output="screen" required="true">
            <param name="lanelet2_map_name" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            <param name="speed_limit"       value="$(arg speed_limit)" />
        </node>

        <!-- Global path visualizer -->
        <node pkg="autoware_mini" type="global_path_visualizer.py" name="global_path_visualizer" output="screen" required="true"/>

        <!-- Config -->
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/planning.yaml" />
    </group>

    <!-- Detection -->
    <group ns="detection">
        <group ns="lidar">
            <!-- Ground removal -->
            <group ns="center">
                <node type="ground_removal.py" name="ground_removal" pkg="autoware_mini" output="screen" required="true">
                    <remap from="points_raw" to="/lidar_center/points_raw" />
                </node>
            </group>
            <!-- Filtering -->
            <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" required="true" />
            <node pkg="nodelet" type="nodelet" name="voxel_grid_filter" args="load pcl/VoxelGrid pcl_manager" output="screen" required="true">
                <remap from="~input" to="/detection/lidar/center/points_no_ground" />
                <remap from="~output" to="/detection/lidar/points_filtered" />
            </node>
            <!-- Point clusterer -->
            <node pkg="autoware_mini_practice_solutions" type="points_clusterer.py" name="points_clusterer" output="screen" required="true" />

            <node pkg="autoware_mini_practice_solutions" type="cluster_detector.py" name="cluster_detector" output="screen" required="true" />
            <!-- Visualizer -->
            <node pkg="autoware_mini" type="detected_objects_visualizer.py" name="detected_objects_visualizer" output="screen" required="true" />

        </group>
        <!-- Config -->
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/detection.yaml"/>

    </group>

    <!-- Control -->
    <group ns="control">
        <!-- Follower -->
        <node pkg="autoware_mini_practice_solutions" type="pure_pursuit_follower.py" name="pure_pursuit_follower" output="screen" required="true">
            <remap from="path" to="/planning/global_path" />
        </node>
        <!-- Config -->
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/control.yaml"/>
    </group>

    <!-- Load vehicle config data -->
    <rosparam command="load" file="$(find autoware_mini)/config/vehicle.yaml" ns="vehicle"/>

    <!-- Load static transforms -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="vehicle_platform_frames">
        <remap from="robot_description" to="vehicle_platform_frames/robot_description" />
        <param name="robot_description" textfile="$(find vehicle_platform)/config/platform.urdf" />
    </node>

    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find autoware_mini_practice_solutions)/rviz/practice_5.rviz" required="true" />

</launch>